###########################
#                         #
#     R software part     #
#                         #
###########################

# load packages
library(SeuratDisk)
library(Seurat)   

# create folder
dir.create("Spatial-seq/results/SCT.CCA/tangam",recursive = T)

# load snRNA-seq and spatial-seq data
## load snRNA-seq data
snRNA-seq <- readRDS(file = "snRNA-seq_injury/results/SCT.CCA/undefined verify/goat_ON injury snRNA_SCT.CCA undefined_verify.rds")
snRNA-seq_MP <- readRDS(file = "snRNA-seq_injury/results/SCT.CCA/MP & astrocyte processing/goat_ON injury snRNA_SCT.CCA MP cluster.rds")
## load spatial-seq data
sp_injury <- readRDS(file = "Spatial-seq/results/SCT.CCA/basic processing/goat_on spatial-seq injury.rds")
sp_control <- readRDS(file = "Spatial-seq/results/SCT.CCA/basic processing/goat_on spatial-seq control.rds")
sp_2os3 <- subset(sp_injury,orig.ident=="2OS3")
sp_3os3 <- subset(sp_injury,orig.ident=="3OS3")
sp_3od3 <- sp_control

# export metadata and merge snRNA-seq celltype & snRNA-seq_MP subcluster colume
meta_snRNA-seq <- write.table(snRNA-seq@meta.data,sep="\t",file="Spatial-seq/results/SCT.CCA/tangam/meta_snRNA-seq.csv"))
meta_snRNA-seq_MP <- write.table(snRNA-seq_MP@meta.data,sep="\t",file="Spatial-seq/results/SCT.CCA/tangam/meta_snRNA-seq_MP.csv"))
meta_snRNA-seq <- read.csv(file = "snRNA-seq@meta.data,sep="\t",file="Spatial-seq/results/SCT.CCA/tangam/meta_snRNA-seq merge meta_snRNA-seq_MP.csv")
snRNA-seq$celltype_MP1_5 <- meta_snRNA-seq$celltype_MP1_5

# isolate control sample
snRNA-seq_control <- subset(snRNA-seq, group=="control")

# sceasy package: seurat change to h5ad format
sceasy::convertFormat(snRNA-seq, from="seurat", to="anndata",
                      outFile='Spatial-seq/results/SCT.CCA/tangam/snRNA-seq refdata.h5ad')
sceasy::convertFormat(snRNA-seq_control, from="seurat", to="anndata",
                      outFile='Spatial-seq/results/SCT.CCA/tangam/snRNA-seq_control refdata.h5ad')
sceasy::convertFormat(sp_2os3, from="seurat", to="anndata",
                      outFile='Spatial-seq/results/SCT.CCA/tangam/sp_2os3.h5ad')
sceasy::convertFormat(sp_3os3, from="seurat", to="anndata",
                      outFile='Spatial-seq/results/SCT.CCA/tangam/sp_3os3.h5ad')
sceasy::convertFormat(sp_3od3, from="seurat", to="anndata",
                      outFile='Spatial-seq/results/SCT.CCA/tangam/sp_3od3.h5ad')

#################################
#                               #
#     python software part      #
#                               #
#################################

# 2OS3 tangram (celltype)

# load packages
import scanpy as sc
import squidpy as sq
import numpy as np
import pandas as pd
from anndata import AnnData
import pathlib
import matplotlib.pyplot as plt
import matplotlib as mpl
import skimage
import seaborn as sns
import tangram as tg
from cellpose import models 
%load_ext autoreload
%autoreload 2
%matplotlib inline

# function: Image identification of nuclei 
def cellpose_he(img, min_size=15, flow_threshold=0.4, channel_cellpose=0):
    model = models.Cellpose(model_type="nuclei")
    res, _, _, _ = model.eval(
        img,
        channels=[channel_cellpose, 0],
        diameter=None,
        min_size=min_size,
        invert=True,
        flow_threshold=flow_threshold,
    )
    return res

# load spatial-seq data
adata_st = sc.read("Spatial-seq/results/SCT.CCA/tangam/sp_2os3.h5ad")

# load snRNA-seq data
adata_sc = sc.read_h5ad('Spatial-seq/results/SCT.CCA/tangam/snRNA-seq refdata.h5ad')

# Pre-processing
sc.tl.rank_genes_groups(adata_sc, groupby="celltype", use_raw=False)
markers_df = pd.DataFrame(adata_sc.uns["rank_genes_groups"]["names"]).iloc[0:100, :]
markers = list(np.unique(markers_df.melt().value.values))
tg.pp_adatas(adata_sc, adata_st, genes=markers)

#Find alignment
ad_map = tg.map_cells_to_space(adata_sc, adata_st,
    mode="cells",
    density_prior='rna_count_based',
    num_epochs=500,
    device='cpu',
)

# New spatial data via aligned single cells
ad_ge = tg.project_genes(adata_map=ad_map, adata_sc=adata_sc)
df_all_genes = tg.compare_spatial_geneexp(ad_ge, adata_st, adata_sc)
sns.scatterplot(data=df_all_genes, x='score', y='sparsity_sp', hue='is_training', alpha=.5);  

# Image identification of nuclei 
img = sq.im.ImageContainer('Spatial-seq/results/SCT.CCA/tangam/2OS3_fullres_image.tif')

sq.im.segment(
    img=img,
    layer="image",
    channel=None,
    method=cellpose_he,
    flow_threshold=0.8,
    channel_cellpose=1,
)

print(img)
print(f"Number of segments in img: {len(np.unique(img['segmented_custom']))}")

fig, axes = plt.subplots(1, 2, figsize=(10, 20))
img.show("image", channel=None, ax=axes[0])
_ = axes[0].set_title("H&E")
img.show("segmented_custom", cmap="jet", interpolation="none", ax=axes[1])
_ = axes[1].set_title("Cellpose segmentation")

# define image layer to use for segmentation
features_kwargs = {
    "segmentation": {
        "label_layer": "segmented_custom",
        "props": ["label", "centroid"],
        "channels": [1, 2],
    }
}
# calculate segmentation features
sq.im.calculate_image_features(
    adata_st,
    img,
    layer="image",
    key_added="image_features",
    features_kwargs=features_kwargs,
    features="segmentation",
    mask_circle=True,
)

# showing nuclei density
adata_st.obs["cell_count"] = adata_st.obsm["image_features"]["segmentation_label"]
sc.pl.spatial(adata_st, color=["region", "cell_count"], frameon=False)

# tangram mapping
ad_map = tg.map_cells_to_space(
    adata_sc,
    adata_st,
    mode="constrained",
    target_count=adata_st.obs.cell_count.sum(),
    density_prior=np.array(adata_st.obs.cell_count) / adata_st.obs.cell_count.sum(),
    num_epochs=1000,
    device='cpu',
)
tg.project_cell_annotations(ad_map, adata_st, annotation="celltype")
annotation_list = list(pd.unique(adata_sc.obs['celltype']))
tg.plot_cell_annotation_sc(adata_st, annotation_list, perc=0.02)


# 2OS3 tangram (celltype_MP1_5)

# load packages
import scanpy as sc
import squidpy as sq
import numpy as np
import pandas as pd
from anndata import AnnData
import pathlib
import matplotlib.pyplot as plt
import matplotlib as mpl
import skimage
import seaborn as sns
import tangram as tg
from cellpose import models 
%load_ext autoreload
%autoreload 2
%matplotlib inline

# function: Image identification of nuclei 
def cellpose_he(img, min_size=15, flow_threshold=0.4, channel_cellpose=0):
    model = models.Cellpose(model_type="nuclei")
    res, _, _, _ = model.eval(
        img,
        channels=[channel_cellpose, 0],
        diameter=None,
        min_size=min_size,
        invert=True,
        flow_threshold=flow_threshold,
    )
    return res

# load spatial-seq data
adata_st = sc.read("Spatial-seq/results/SCT.CCA/tangam/sp_2os3.h5ad")

# load snRNA-seq data
adata_sc = sc.read_h5ad('Spatial-seq/results/SCT.CCA/tangam/snRNA-seq refdata.h5ad')

# Pre-processing
sc.tl.rank_genes_groups(adata_sc, groupby="celltype_MP1_5", use_raw=False)
markers_df = pd.DataFrame(adata_sc.uns["rank_genes_groups"]["names"]).iloc[0:100, :]
markers = list(np.unique(markers_df.melt().value.values))
tg.pp_adatas(adata_sc, adata_st, genes=markers)

# Find alignment
ad_map = tg.map_cells_to_space(adata_sc, adata_st,
    mode="cells",
    density_prior='rna_count_based',
    num_epochs=500,
    device='cpu',
)

# New spatial data via aligned single cells
ad_ge = tg.project_genes(adata_map=ad_map, adata_sc=adata_sc)
df_all_genes = tg.compare_spatial_geneexp(ad_ge, adata_st, adata_sc)
sns.scatterplot(data=df_all_genes, x='score', y='sparsity_sp', hue='is_training', alpha=.5);  

# Image identification of nuclei 
img = sq.im.ImageContainer('Spatial-seq/results/SCT.CCA/tangam/2OS3_fullres_image.tif')

sq.im.segment(
    img=img,
    layer="image",
    channel=None,
    method=cellpose_he,
    flow_threshold=0.8,
    channel_cellpose=1,
)

print(img)
print(f"Number of segments in img: {len(np.unique(img['segmented_custom']))}")

fig, axes = plt.subplots(1, 2, figsize=(10, 20))
img.show("image", channel=None, ax=axes[0])
_ = axes[0].set_title("H&E")
img.show("segmented_custom", cmap="jet", interpolation="none", ax=axes[1])
_ = axes[1].set_title("Cellpose segmentation")

# define image layer to use for segmentation
features_kwargs = {
    "segmentation": {
        "label_layer": "segmented_custom",
        "props": ["label", "centroid"],
        "channels": [1, 2],
    }
}
# calculate segmentation features
sq.im.calculate_image_features(
    adata_st,
    img,
    layer="image",
    key_added="image_features",
    features_kwargs=features_kwargs,
    features="segmentation",
    mask_circle=True,
)

# showing nuclei density
adata_st.obs["cell_count"] = adata_st.obsm["image_features"]["segmentation_label"]
sc.pl.spatial(adata_st, color=["region", "cell_count"], frameon=False)

# tangram mapping
ad_map = tg.map_cells_to_space(
    adata_sc,
    adata_st,
    mode="constrained",
    target_count=adata_st.obs.cell_count.sum(),
    density_prior=np.array(adata_st.obs.cell_count) / adata_st.obs.cell_count.sum(),
    num_epochs=1000,
    device='cpu',
)
tg.project_cell_annotations(ad_map, adata_st, annotation="celltype_MP1_5")
annotation_list = list(pd.unique(adata_sc.obs['celltype_MP1_5']))
tg.plot_cell_annotation_sc(adata_st, annotation_list, perc=0.02)


###################################################################################

# 3OS3 tangram (celltype)

# load packages
import scanpy as sc
import squidpy as sq
import numpy as np
import pandas as pd
from anndata import AnnData
import pathlib
import matplotlib.pyplot as plt
import matplotlib as mpl
import skimage
import seaborn as sns
import tangram as tg
from cellpose import models 
%load_ext autoreload
%autoreload 2
%matplotlib inline

# function: Image identification of nuclei 
def cellpose_he(img, min_size=15, flow_threshold=0.4, channel_cellpose=0):
    model = models.Cellpose(model_type="nuclei")
    res, _, _, _ = model.eval(
        img,
        channels=[channel_cellpose, 0],
        diameter=None,
        min_size=min_size,
        invert=True,
        flow_threshold=flow_threshold,
    )
    return res

# load spatial-seq data
adata_st = sc.read("Spatial-seq/results/SCT.CCA/tangam/sp_3os3.h5ad")

# load snRNA-seq data
adata_sc = sc.read_h5ad('Spatial-seq/results/SCT.CCA/tangam/snRNA-seq refdata.h5ad')

# Pre-processing
sc.tl.rank_genes_groups(adata_sc, groupby="celltype", use_raw=False)
markers_df = pd.DataFrame(adata_sc.uns["rank_genes_groups"]["names"]).iloc[0:100, :]
markers = list(np.unique(markers_df.melt().value.values))
tg.pp_adatas(adata_sc, adata_st, genes=markers)

#Find alignment
ad_map = tg.map_cells_to_space(adata_sc, adata_st,
    mode="cells",
    density_prior='rna_count_based',
    num_epochs=500,
    device='cpu',
)

# New spatial data via aligned single cells
ad_ge = tg.project_genes(adata_map=ad_map, adata_sc=adata_sc)
df_all_genes = tg.compare_spatial_geneexp(ad_ge, adata_st, adata_sc)
sns.scatterplot(data=df_all_genes, x='score', y='sparsity_sp', hue='is_training', alpha=.5);  

# Image identification of nuclei 
img = sq.im.ImageContainer('Spatial-seq/results/SCT.CCA/tangam/3OS3_fullres_image.tif')

sq.im.segment(
    img=img,
    layer="image",
    channel=None,
    method=cellpose_he,
    flow_threshold=0.8,
    channel_cellpose=1,
)

print(img)
print(f"Number of segments in img: {len(np.unique(img['segmented_custom']))}")

fig, axes = plt.subplots(1, 2, figsize=(10, 20))
img.show("image", channel=None, ax=axes[0])
_ = axes[0].set_title("H&E")
img.show("segmented_custom", cmap="jet", interpolation="none", ax=axes[1])
_ = axes[1].set_title("Cellpose segmentation")

# define image layer to use for segmentation
features_kwargs = {
    "segmentation": {
        "label_layer": "segmented_custom",
        "props": ["label", "centroid"],
        "channels": [1, 2],
    }
}
# calculate segmentation features
sq.im.calculate_image_features(
    adata_st,
    img,
    layer="image",
    key_added="image_features",
    features_kwargs=features_kwargs,
    features="segmentation",
    mask_circle=True,
)

# showing nuclei density
adata_st.obs["cell_count"] = adata_st.obsm["image_features"]["segmentation_label"]
sc.pl.spatial(adata_st, color=["region", "cell_count"], frameon=False)

# tangram mapping
ad_map = tg.map_cells_to_space(
    adata_sc,
    adata_st,
    mode="constrained",
    target_count=adata_st.obs.cell_count.sum(),
    density_prior=np.array(adata_st.obs.cell_count) / adata_st.obs.cell_count.sum(),
    num_epochs=1000,
    device='cpu',
)
tg.project_cell_annotations(ad_map, adata_st, annotation="celltype")
annotation_list = list(pd.unique(adata_sc.obs['celltype']))
tg.plot_cell_annotation_sc(adata_st, annotation_list, perc=0.02)



# 3OS3 tangram (celltype_MP1_5)

# load packages
import scanpy as sc
import squidpy as sq
import numpy as np
import pandas as pd
from anndata import AnnData
import pathlib
import matplotlib.pyplot as plt
import matplotlib as mpl
import skimage
import seaborn as sns
import tangram as tg
from cellpose import models 
%load_ext autoreload
%autoreload 2
%matplotlib inline

# function: Image identification of nuclei 
def cellpose_he(img, min_size=15, flow_threshold=0.4, channel_cellpose=0):
    model = models.Cellpose(model_type="nuclei")
    res, _, _, _ = model.eval(
        img,
        channels=[channel_cellpose, 0],
        diameter=None,
        min_size=min_size,
        invert=True,
        flow_threshold=flow_threshold,
    )
    return res

# load spatial-seq data
adata_st = sc.read("Spatial-seq/results/SCT.CCA/tangam/sp_3os3.h5ad")

# load snRNA-seq data
adata_sc = sc.read_h5ad('Spatial-seq/results/SCT.CCA/tangam/snRNA-seq refdata.h5ad')

# Pre-processing
sc.tl.rank_genes_groups(adata_sc, groupby="celltype_MP1_5", use_raw=False)
markers_df = pd.DataFrame(adata_sc.uns["rank_genes_groups"]["names"]).iloc[0:100, :]
markers = list(np.unique(markers_df.melt().value.values))
tg.pp_adatas(adata_sc, adata_st, genes=markers)

# Find alignment
ad_map = tg.map_cells_to_space(adata_sc, adata_st,
    mode="cells",
    density_prior='rna_count_based',
    num_epochs=500,
    device='cpu',
)

# New spatial data via aligned single cells
ad_ge = tg.project_genes(adata_map=ad_map, adata_sc=adata_sc)
df_all_genes = tg.compare_spatial_geneexp(ad_ge, adata_st, adata_sc)
sns.scatterplot(data=df_all_genes, x='score', y='sparsity_sp', hue='is_training', alpha=.5);  

# Image identification of nuclei 
img = sq.im.ImageContainer('Spatial-seq/results/SCT.CCA/tangam/3OS3_fullres_image.tif')

sq.im.segment(
    img=img,
    layer="image",
    channel=None,
    method=cellpose_he,
    flow_threshold=0.8,
    channel_cellpose=1,
)

print(img)
print(f"Number of segments in img: {len(np.unique(img['segmented_custom']))}")

fig, axes = plt.subplots(1, 2, figsize=(10, 20))
img.show("image", channel=None, ax=axes[0])
_ = axes[0].set_title("H&E")
img.show("segmented_custom", cmap="jet", interpolation="none", ax=axes[1])
_ = axes[1].set_title("Cellpose segmentation")

# define image layer to use for segmentation
features_kwargs = {
    "segmentation": {
        "label_layer": "segmented_custom",
        "props": ["label", "centroid"],
        "channels": [1, 2],
    }
}
# calculate segmentation features
sq.im.calculate_image_features(
    adata_st,
    img,
    layer="image",
    key_added="image_features",
    features_kwargs=features_kwargs,
    features="segmentation",
    mask_circle=True,
)

# showing nuclei density
adata_st.obs["cell_count"] = adata_st.obsm["image_features"]["segmentation_label"]
sc.pl.spatial(adata_st, color=["region", "cell_count"], frameon=False)

# tangram mapping
ad_map = tg.map_cells_to_space(
    adata_sc,
    adata_st,
    mode="constrained",
    target_count=adata_st.obs.cell_count.sum(),
    density_prior=np.array(adata_st.obs.cell_count) / adata_st.obs.cell_count.sum(),
    num_epochs=1000,
    device='cpu',
)
tg.project_cell_annotations(ad_map, adata_st, annotation="celltype_MP1_5")
annotation_list = list(pd.unique(adata_sc.obs['celltype_MP1_5']))
tg.plot_cell_annotation_sc(adata_st, annotation_list, perc=0.02)



###################################################################################

# 3OD3 tangram (celltype)

# load packages
import scanpy as sc
import squidpy as sq
import numpy as np
import pandas as pd
from anndata import AnnData
import pathlib
import matplotlib.pyplot as plt
import matplotlib as mpl
import skimage
import seaborn as sns
import tangram as tg
from cellpose import models 
%load_ext autoreload
%autoreload 2
%matplotlib inline

# function: Image identification of nuclei 
def cellpose_he(img, min_size=15, flow_threshold=0.4, channel_cellpose=0):
    model = models.Cellpose(model_type="nuclei")
    res, _, _, _ = model.eval(
        img,
        channels=[channel_cellpose, 0],
        diameter=None,
        min_size=min_size,
        invert=True,
        flow_threshold=flow_threshold,
    )
    return res

# load spatial-seq data
adata_st = sc.read("Spatial-seq/results/SCT.CCA/tangam/sp_3od3.h5ad")

# load snRNA-seq data
adata_sc = sc.read_h5ad('Spatial-seq/results/SCT.CCA/tangam/snRNA-seq_control refdata.h5ad')

# Pre-processing
sc.tl.rank_genes_groups(adata_sc, groupby="celltype", use_raw=False)
markers_df = pd.DataFrame(adata_sc.uns["rank_genes_groups"]["names"]).iloc[0:100, :]
markers = list(np.unique(markers_df.melt().value.values))
tg.pp_adatas(adata_sc, adata_st, genes=markers)

#Find alignment
ad_map = tg.map_cells_to_space(adata_sc, adata_st,
    mode="cells",
    density_prior='rna_count_based',
    num_epochs=500,
    device='cpu',
)

# New spatial data via aligned single cells
ad_ge = tg.project_genes(adata_map=ad_map, adata_sc=adata_sc)
df_all_genes = tg.compare_spatial_geneexp(ad_ge, adata_st, adata_sc)
sns.scatterplot(data=df_all_genes, x='score', y='sparsity_sp', hue='is_training', alpha=.5);  

# Image identification of nuclei 
img = sq.im.ImageContainer('Spatial-seq/results/SCT.CCA/tangam/3OD3_fullres_image.tif')

sq.im.segment(
    img=img,
    layer="image",
    channel=None,
    method=cellpose_he,
    flow_threshold=0.8,
    channel_cellpose=1,
)

print(img)
print(f"Number of segments in img: {len(np.unique(img['segmented_custom']))}")

fig, axes = plt.subplots(1, 2, figsize=(10, 20))
img.show("image", channel=None, ax=axes[0])
_ = axes[0].set_title("H&E")
img.show("segmented_custom", cmap="jet", interpolation="none", ax=axes[1])
_ = axes[1].set_title("Cellpose segmentation")

# define image layer to use for segmentation
features_kwargs = {
    "segmentation": {
        "label_layer": "segmented_custom",
        "props": ["label", "centroid"],
        "channels": [1, 2],
    }
}
# calculate segmentation features
sq.im.calculate_image_features(
    adata_st,
    img,
    layer="image",
    key_added="image_features",
    features_kwargs=features_kwargs,
    features="segmentation",
    mask_circle=True,
)

# showing nuclei density
adata_st.obs["cell_count"] = adata_st.obsm["image_features"]["segmentation_label"]
sc.pl.spatial(adata_st, color=["region", "cell_count"], frameon=False)

# tangram mapping
ad_map = tg.map_cells_to_space(
    adata_sc,
    adata_st,
    mode="constrained",
    target_count=adata_st.obs.cell_count.sum(),
    density_prior=np.array(adata_st.obs.cell_count) / adata_st.obs.cell_count.sum(),
    num_epochs=1000,
    device='cpu',
)
tg.project_cell_annotations(ad_map, adata_st, annotation="celltype")
annotation_list = list(pd.unique(adata_sc.obs['celltype']))
tg.plot_cell_annotation_sc(adata_st, annotation_list, perc=0.02)



# 3OD3 tangram (celltype_MP1_5)

# load packages
import scanpy as sc
import squidpy as sq
import numpy as np
import pandas as pd
from anndata import AnnData
import pathlib
import matplotlib.pyplot as plt
import matplotlib as mpl
import skimage
import seaborn as sns
import tangram as tg
from cellpose import models 
%load_ext autoreload
%autoreload 2
%matplotlib inline

# function: Image identification of nuclei 
def cellpose_he(img, min_size=15, flow_threshold=0.4, channel_cellpose=0):
    model = models.Cellpose(model_type="nuclei")
    res, _, _, _ = model.eval(
        img,
        channels=[channel_cellpose, 0],
        diameter=None,
        min_size=min_size,
        invert=True,
        flow_threshold=flow_threshold,
    )
    return res

# load spatial-seq data
adata_st = sc.read("Spatial-seq/results/SCT.CCA/tangam/sp_3od3.h5ad")

# load snRNA-seq data
adata_sc = sc.read_h5ad('Spatial-seq/results/SCT.CCA/tangam/snRNA-seq_control refdata.h5ad')

# Pre-processing
sc.tl.rank_genes_groups(adata_sc, groupby="celltype_MP1_5", use_raw=False)
markers_df = pd.DataFrame(adata_sc.uns["rank_genes_groups"]["names"]).iloc[0:100, :]
markers = list(np.unique(markers_df.melt().value.values))
tg.pp_adatas(adata_sc, adata_st, genes=markers)

# Find alignment
ad_map = tg.map_cells_to_space(adata_sc, adata_st,
    mode="cells",
    density_prior='rna_count_based',
    num_epochs=500,
    device='cpu',
)

# New spatial data via aligned single cells
ad_ge = tg.project_genes(adata_map=ad_map, adata_sc=adata_sc)
df_all_genes = tg.compare_spatial_geneexp(ad_ge, adata_st, adata_sc)
sns.scatterplot(data=df_all_genes, x='score', y='sparsity_sp', hue='is_training', alpha=.5);  

# Image identification of nuclei 
img = sq.im.ImageContainer('Spatial-seq/results/SCT.CCA/tangam/3OS3_fullres_image.tif')

sq.im.segment(
    img=img,
    layer="image",
    channel=None,
    method=cellpose_he,
    flow_threshold=0.8,
    channel_cellpose=1,
)

print(img)
print(f"Number of segments in img: {len(np.unique(img['segmented_custom']))}")

fig, axes = plt.subplots(1, 2, figsize=(10, 20))
img.show("image", channel=None, ax=axes[0])
_ = axes[0].set_title("H&E")
img.show("segmented_custom", cmap="jet", interpolation="none", ax=axes[1])
_ = axes[1].set_title("Cellpose segmentation")

# define image layer to use for segmentation
features_kwargs = {
    "segmentation": {
        "label_layer": "segmented_custom",
        "props": ["label", "centroid"],
        "channels": [1, 2],
    }
}
# calculate segmentation features
sq.im.calculate_image_features(
    adata_st,
    img,
    layer="image",
    key_added="image_features",
    features_kwargs=features_kwargs,
    features="segmentation",
    mask_circle=True,
)

# showing nuclei density
adata_st.obs["cell_count"] = adata_st.obsm["image_features"]["segmentation_label"]
sc.pl.spatial(adata_st, color=["region", "cell_count"], frameon=False)

# tangram mapping
ad_map = tg.map_cells_to_space(
    adata_sc,
    adata_st,
    mode="constrained",
    target_count=adata_st.obs.cell_count.sum(),
    density_prior=np.array(adata_st.obs.cell_count) / adata_st.obs.cell_count.sum(),
    num_epochs=1000,
    device='cpu',
)
tg.project_cell_annotations(ad_map, adata_st, annotation="celltype_MP1_5")
annotation_list = list(pd.unique(adata_sc.obs['celltype_MP1_5']))
tg.plot_cell_annotation_sc(adata_st, annotation_list, perc=0.02)


