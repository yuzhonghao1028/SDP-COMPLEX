# load packages
library(Seurat)
library(ggplot2)
library(reshape2)
library(SingleCellExperiment)
library(edgeR)
library(zinbwave)
library(scran)

# load RDS data
seurat.obj.combined <- readRDS(file = "snRNA-seq_dec/results/SCT.CCA/celltypist annotation/goat_ON decoupling snRNA_SCT.CCA celltype prediction.rds")

# create folder
dir.create("snRNA-seq_dec/results/SCT.CCA/basic processing",recursive = T)

# extract seurat color function
extract.col<-function(picture){
  p1 <- picture 
  x<-ggplot_build(p1)
  info = data.frame(colour = x$data[[1]]$colour, group = x$data[[1]]$group)
  info <- unique((arrange(info, group)))
  seurat.cols <<- as.character(info$colour)
  rm(p1,x,info)
}

# all celltype DEGs analysis in injury vs. control (ZINBWAVE method)
Idents(seurat.obj.combined) <- "celltype"
celltype_name <- as.character(unique(seurat.obj.combined$celltype))
for (i in celltype_name){
cluster_choose <- make.names(paste0(i))
celltype.sub <- subset(seurat.obj.combined, idents=c(i)) 
## Convert to SingleCellExperiment object
sce <- as.SingleCellExperiment(celltype.sub, assay="RNA")

## Filter out lowly expressed genes
## Identify genes that have a count of at least 3 in at least 6 cells
filter <- rowSums(assay(sce)>2)>5
## Generate information on how many genes meet these criteria
table(filter)
## Filter matrix based on genes above
sce.filt <- sce[filter,]
## View matrix stats after filtering
sce.filt
rm(sce)
## Select highly variable genes on which to focus analysis
## Model gene variance
sce.var <- modelGeneVar(sce.filt)
## Using gene variance, identify the top 2000
keep <- getTopHVGs(sce.var, n=2000)
## Filter matrix for only these genes
sce.filt <- sce.filt[keep,]
rm(sce.var)
## Generate observational weights for genes
## Create zero-inflated negative binomial regression model to the data (note: this step is VERY computationally intensive)
## Convert SingleCellExperiment object counts to matrix format
## (oberservational weights can only be computed from SummarizedExperiment or matrix)
sce.filt@assays@data@listData$counts <- as.matrix(sce.filt@assays@data@listData$counts)
sce.zinb <- zinbwave(sce.filt, K=0, epsilon=1e12, observationalWeights=TRUE, verbose=TRUE)
## Isolate weights to pass to DGE calculations
weights <- assay(sce.zinb, "weights")
#Save model with weights
saveRDS(sce.zinb, file=paste0('snRNA-seq_dec/results/SCT.CCA/basic processing/zinb_weights_',cluster_choose,'.rds')) 
## DGE analysis with edgeR
## Create design matrix specifying conditions and sex as variables
condition <- factor(sce.zinb$group)  
design <- model.matrix(~0+condition)
## Create edgeR object from model with weights
dge <- DGEList(assay(sce.zinb))
## Caluclate normalization factors with TMM
dge <- calcNormFactors(dge)
## Add observational weights into the edgeR object
dge$weights <- weights
## Estimate dispersion, passing defined design matrix to function
dge <- estimateDisp(dge, design)
## Fit model
fit <- glmFit(dge, design)
## Make comparison between AD and NS (by specifying AD first, NS becomes control)
colnames(design)<-make.names(colnames(design))
contrast <- makeContrasts(conditionsurgery-conditionuntreated, levels=design) 
## Zero-inflation adjusted F test for assessing DGE
## This object will have all of the DGE results
dge_res <- glmWeightedF(fit, contrast=contrast)
## Save DGE so it doesn't need to be recalculated
saveRDS(dge_res, file=paste0('snRNA-seq_dec/results/SCT.CCA/basic processing/zinb_DGE_result_',cluster_choose,'.rds'))  
## Summarize results
## Basic MD plot to visualize results
## Filter DGEs meeting statistical significance mentioned above
genes <- topTags(dge_res, n=2000, adjust.method = "BH", sort.by = "PValue", p.value = 0.05)
## Create dataframe with gene name, log2 fold change, and adjusted p-value
genes.sig <- data.frame(row.names(genes))
genes.sig$Pval <- genes$table$FDR
genes.sig$logFC <- genes$table$logFC
genes.sig.lfc <- subset(genes.sig, genes.sig$logFC >= 0.25 | genes.sig$logFC <= -0.25)
## Save dataframe as csv file
openxlsx::write.xlsx(genes.sig.lfc, file=paste0('snRNA-seq_dec/results/SCT.CCA/basic processing/zinb_sig_genes_',cluster_choose,'-0.25lfc.xlsx')) 
}

# DEGs two-way bar charts
df <- read.csv(file = "snRNA-seq_dec/results/SCT.CCA/basic processing/DEG number_log2fc0.5.csv")
df <- melt(df) 
ggplot(df, aes(
  x = factor(X,levels = unique(X)),             
  y = ifelse(variable == "UP", value, -value),  
  fill = variable)) +
  geom_bar(stat = 'identity')+  
  coord_flip()+ 
  geom_text(
    aes(label=value,
        #vjust = ifelse(variable == "Up", -0.5, 1),
        hjust = ifelse(variable == "UP", -0.4, 1.1)
    ),
    size=0)+
  scale_y_continuous(
    labels = abs,
    expand = expansion(mult = c(0.1, 0.1)))+
  ylab("# of DEGs")+xlab("")+theme_classic()+
  #scale_y_continuous(breaks = seq(-900, 900, 100))+
  scale_fill_manual(values=c("tomato",
                             "dodgerblue"))+
  theme(text = element_text(size = 20))
  
ggsave(filename = "snRNA-seq_dec/results/SCT.CCA/basic processing/Two-way bar charts_log2fc0.5.pdf",width = 6.2,height = 4.3)

# addmodulescore
pal <- pal <- viridis(n = 10, option = "H", direction = 1)
Idents(seurat.obj.combined) <- "celltype"
## axon development score
genelist <- c("BCL2",
              "BMPR1B",
              "DDR1",
              "CHN1",
              "CTNNA2",
              "DAG1",
              "EDNRA",
              "EPHA5",
              "TNC",
              "KIF5C",
              "MAP1B",
              "NCAM1",
              "NCAM2",
              "NFIB",
              "NRCAM",
              "PTPRM",
              "PTPRZ1",
              "TRIO",
              "UCHL1",
              "SEMA3B",
              "FZD3",
              "UNC5C",
              "DCLK1",
              "SLIT2",
              "NRXN3",
              "NRXN1",
              "CHL1",
              "PALLD",
              "AUTS2",
              "ENAH",
              "PARD3",
              "DPYSL5",
              "SEMA6A",
              "DOCK7",
              "PRICKLE1")
seurat.obj.combined <- AddModuleScore(seurat.obj.combined,features =list(genelist),name = "Axon_development_score",assay = "RNA")
FeaturePlot(seurat.obj.combined,features = "Axon_development_score1",split.by = "group",order = T,cols = pal)& theme(legend.position = "right")
ggsave("snRNA-seq_dec/results/SCT.CCA/basic processing/all_celltype Axon_development_score1 splitby_group featureplot.pdf",height = 3,width = 8)

VlnPlot(decompression,features = "Axon_development_score1",split.by = "group",pt.size = 0)+xlab("")+
  geom_boxplot(width=.2,position=position_dodge(0.9))+
  NoLegend()
ggsave("snRNA-seq_dec/results/SCT.CCA/basic processing/all_celltype Axon_development_score1 splitby_group vlnplot.pdf",height = 7,width = 4.5)

## myelination score
genelist <- c("ANK2",
          "DAG1",
          "ID4",
          "ITGB4",
          "NTRK2",
          "TENM4",
          "PLLP",
          "PARD3",
          "HYCC1")
seurat.obj.combined <- AddModuleScore(seurat.obj.combined,features =list(genelist),name = "Myelination_score",assay = "RNA")
FeaturePlot(deurat.obj.combined,features = "Myelination_score1",split.by = "group",order = T,cols = pal)& theme(legend.position = "right")
ggsave("snRNA-seq_dec/results/SCT.CCA/basic processing/all_celltype myelination_score1 splitby_group featureplot.pdf",height = 3,width = 8)

VlnPlot(eurat.obj.combined,features = "Myelination_score1",split.by = "group",pt.size = 0)+xlab("")+
  geom_boxplot(width=.2,position=position_dodge(0.9))+
  NoLegend()
ggsave("snRNA-seq_dec/results/SCT.CCA/basic processing/all_celltype myelination_score1 splitby_group vlnplot.pdf",height = 7,width = 4.5)

# celltype propotion stackbarplot
data <- as.data.frame(table(seurat.obj.combined$celltype,seurat.obj.combined$group))
data <- data %>% group_by(Var2) %>% mutate(percentage = Freq/sum(Freq)) %>% mutate(label = Freq/sum(Freq)*100)
data$label <- paste(sprintf("%.1f", data$label),"%")
extract.col(DimPlot(seurat.obj.combined,group.by = "celltype",split.by = "group"))

ggplot(data, aes( x = Var2, y=percentage,fill = Var1))+
  geom_col(position = 'stack', width = 0.8)+
  theme_bw()+  
  scale_fill_manual(values=seurat.cols)+  
  scale_y_continuous(expand = c(0,0))+
  labs(x="",y="Percentage",
       fill="celltype",title="")+
  theme(
    text=element_text(size=12),
    plot.title = element_text(hjust = 0.5,vjust = 0.5), 
    axis.text.y=element_text(size=12,color = "black"),
    axis.text.x=element_text(size=12,  color = "black",angle = 45, hjust = 0.5,
                             vjust = 0.5),
    legend.title=element_text(size=12), 
    legend.text=element_text(size=12)
  )+
  theme(panel.grid = element_blank(),
        panel.background = element_rect(color = 'black', fill = 'transparent'),
  )+ 
  guides(fill=guide_legend(keywidth = 1, keyheight = 1))+ 
  ylim(c(-0.005,1.005))+
  scale_y_continuous(labels = scales::percent_format(scale = 100))+
  geom_text(aes(label=label),size=4,color="black",position = "stack")

ggsave(filename = "snRNA-seq_dec/results/SCT.CCA/basic processing/all_celltype stack barplot.pdf",width = 4.5,height = 4.5)

